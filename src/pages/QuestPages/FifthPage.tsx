import { styled } from 'styled-components';
import { InputBox } from '../../components/InputBox/InputBox';
import { useState, useEffect } from 'react';
import { Button } from '../../components/Button/Button';
import { useNavigate } from "react-router-dom";


const Header = styled.h1`
    color: #62BEC1;
    font-family: 'JetBrains Mono', monospace;
    font-size: 4vh;
`;

const Paragraph = styled.p`
    color: #62BEC1;
    font-family: 'JetBrains Mono', monospace;
    font-size: 2vh;
    margin-top: 10px;
    align-self: flex-start;
`;

const Task = styled.p`
    color: #62BEC1;
    font-family: 'JetBrains Mono', monospace;
    font-size: 3vh;
    margin-top: 10px;
    font-weight: 800;
    align-self: flex-start;
`;

const –°orrect = styled.p`
    color: #20c728;
    font-family: 'JetBrains Mono', monospace;
    font-size: 3vh;
    margin-top: 10px;
    font-weight: 800;
    align-self: flex-start;
    width: 100%;
`;

const Mistake = styled.p`
    color: #d83737;
    font-family: 'JetBrains Mono', monospace;
    font-size: 3vh;
    margin-top: 10px;
    font-weight: 800;
    align-self: flex-start;
    width: 100%;
`;

const Need = styled.p`
    color: transparent;
    font-size: 3vh;
`;

const StyledPage = styled.div`
    scrollbar-width: none;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    height: 100vh;
    overflow-y: auto;
    padding: 4vh;
`;

export const FifthPage = () => {
    const navigate = useNavigate();
    const [answer, setAnswer] = useState('');
    const [answered, isAnswered] = useState(false);
    const [onTime, setTime] = useState(false);

    const checkAnswer = (value: string) => {
        if (value.toLowerCase() === '5415') {
            isAnswered(true);
        }
        setAnswer(value);
    }

    const nextTask = async() => {
        if (answered) {
            localStorage.setItem('step', '6');
            await new Promise(resolve => setTimeout(resolve, 500));
            navigate(`/app/6`);
        }
    }

    useEffect(() => {
        const today = new Date();
        setTime(today.getDate() >= 1 && today.getMonth() >= 0);
    });

    return (
        <StyledPage>
            {onTime ? 
            (
                <>
                    <Paragraph>–£–∂–µ 1–æ–µ –Ø–Ω–≤–∞—Ä—è?!</Paragraph>
                    <Paragraph>–° –Ω–æ–≤—ã–º –≥–æ–¥–æ–º! –ö–∞–∫ –∂–µ –±—ã—Å—Ç—Ä–æ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ...</Paragraph>
                    <Header>–ó–∞–≥–∞–¥–∫–∞ #5</Header>
                    <Task>–°–ª–æ–∂–∏ –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ—à–ª—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤</Task>
                    <Paragraph>–ì–æ–¥ —Å–≤–∏–Ω—å–∏ –ø—Ä–æ—à–µ–ª, –∏ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤ 2031... –ù–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ. –ï—Å–ª–∏ —Å–ª–æ–∂–∏—Ç –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ—à–ª—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –æ—Ç–Ω—è—Ç—å 4...</Paragraph>
                    <Paragraph>–¢–æ –º—ã –ø–æ–ª—É—á–∏–º –≥–æ–¥ –°–≤–∏–Ω—å–∏ –≤ –¥–∞–ª–µ–∫–æ–º –±—É–¥—É—â–µ–º</Paragraph>                    <Paragraph>–ù–∞–π–¥–∏ –ø—Ä–æ –∫–∞–∫–æ–π –≥–æ–¥ —è –≥–æ–≤–æ—Ä—é</Paragraph>
                    <Paragraph>–ï—Å–ª–∏ –≤—ã–∫–∏–Ω—É–ª–∞ —É–ø–∞–∫–æ–≤–∫–∏, —Ç–æ –Ω–æ–º–µ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å–ø—Ä–æ—Å–∏ —É –º–µ–Ω—è</Paragraph>
                    <InputBox inputType="text" placeholder="–¢–≤–æ–π –æ—Ç–≤–µ—Ç" value={answer} onChange={(value) => { checkAnswer(value); }} />
                    {answered? (
                        <–°orrect>–£–º–Ω–∏—á–∫–∞! –ú–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ #5415. –ò –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–πüò• –º–æ–π –ø–æ–¥–∞—Ä–æ–∫</–°orrect>
                    ) : (
                        <Mistake>–ï—â–µ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ...</Mistake>
                    )}
                    <Button onClick={nextTask} size="large" time={answered}>–î–∞–ª—å—à–µ?</Button>
                    <Need>–ó–∞–≥–∞–¥–∫–∞ #3</Need>
                </>
            ): (
                <Paragraph style={{alignSelf: "center", fontSize: "8vh", textAlign: "center"}}>–•–≤–∞—Ç–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏—Ö–æ–¥–∏ 1–æ–≥–æ –Ø–Ω–≤–∞—Ä—è!</Paragraph>
            )}
        </StyledPage>       
    );
}

export default FifthPage;